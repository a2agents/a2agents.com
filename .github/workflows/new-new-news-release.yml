name: New New News - Generate & Release Artifacts

on:
  # Manual trigger with customization
  workflow_dispatch:
    inputs:
      query:
        description: 'Research query or report topic'
        required: true
        default: '2020 Human Artifacts'
      report_mode:
        description: 'Generate comprehensive report (true/false)'
        required: false
        default: 'false'
      target_artifacts:
        description: 'Target artifacts (for report mode)'
        required: false
        default: '25'
      max_artifacts:
        description: 'Max artifacts (for single query mode)'
        required: false
        default: '5'

  # Auto-trigger on push to main (uses default query)
  push:
    branches: [ main ]
    paths:
      - 'new_new_news/**'

jobs:
  generate-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for creating releases

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        cd new_new_news
        pip install -r requirements.txt

    - name: Validate API key
      run: |
        if [ -z "${{ secrets.YOU_API_KEY }}" ]; then
          echo "❌ ERROR: YOU_API_KEY secret is not set"
          echo "Please add YOU_API_KEY to organization secrets"
          exit 1
        fi
        echo "✅ API key is configured"

    - name: Set configuration
      id: config
      run: |
        # Use inputs if workflow_dispatch, otherwise use defaults for push
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "query=${{ github.event.inputs.query }}" >> $GITHUB_OUTPUT
          echo "report_mode=${{ github.event.inputs.report_mode }}" >> $GITHUB_OUTPUT
          echo "target_artifacts=${{ github.event.inputs.target_artifacts }}" >> $GITHUB_OUTPUT
          echo "max_artifacts=${{ github.event.inputs.max_artifacts }}" >> $GITHUB_OUTPUT
        else
          echo "query=2020 Human Artifacts" >> $GITHUB_OUTPUT
          echo "report_mode=false" >> $GITHUB_OUTPUT
          echo "target_artifacts=25" >> $GITHUB_OUTPUT
          echo "max_artifacts=5" >> $GITHUB_OUTPUT
        fi

    - name: Run research system (report mode)
      if: ${{ steps.config.outputs.report_mode == 'true' }}
      env:
        YOU_API_KEY: ${{ secrets.YOU_API_KEY }}
      run: |
        cd new_new_news
        python main.py "${{ steps.config.outputs.query }}" \
          --report-mode \
          --target-artifacts ${{ steps.config.outputs.target_artifacts }} \
          --format json \
          --output research_report.json \
          --no-mock

    - name: Run research system (single query mode)
      if: ${{ steps.config.outputs.report_mode != 'true' }}
      env:
        YOU_API_KEY: ${{ secrets.YOU_API_KEY }}
      run: |
        cd new_new_news
        python main.py "${{ steps.config.outputs.query }}" \
          --max-artifacts ${{ steps.config.outputs.max_artifacts }} \
          --format json \
          --output research_report.json \
          --no-mock

    - name: Verify outputs generated
      run: |
        cd new_new_news
        echo "Checking generated files..."
        ls -lh research_report.* artifacts_table.csv RESEARCH_SUMMARY.md research_metadata.json || true

    - name: Create release tag
      id: tag
      run: |
        # Create timestamp-based tag
        TAG="v$(date +'%Y%m%d-%H%M%S')"
        echo "tag=$TAG" >> $GITHUB_OUTPUT

    - name: Generate release notes
      id: notes
      run: |
        cd new_new_news

        # Extract metadata from JSON
        NOTES=$(python << 'EOF'
import json
with open('research_report.json', 'r') as f:
    data = json.load(f)

summary = data.get('executive_summary', {})
metadata = data.get('metadata', {})

notes = f"""# New New News Research Report

## Query
{metadata.get('query', 'N/A')}

## Summary
- **Artifacts Found:** {summary.get('total_artifacts_found', 0)}
- **Total Estimated Value:** ${summary.get('total_estimated_value', 0):,}
- **Average Confidence Score:** {summary.get('average_confidence_score', 0):.2f}

## Key Findings
"""

for finding in summary.get('key_findings', []):
    notes += f"- {finding}\n"

notes += "\n## Top 3 Artifacts\n"
for i, artifact in enumerate(summary.get('top_3_artifacts', [])[:3], 1):
    notes += f"{i}. **{artifact['title']}** ({artifact['type']})\n"
    notes += f"   - Value: ${artifact['estimated_value']:,}\n"
    notes += f"   - Confidence: {artifact['confidence_score']:.2f}\n\n"

notes += "\n## Metadata\n"
notes += f"- **Timestamp:** {metadata.get('timestamp', 'N/A')}\n"
notes += f"- **System Version:** {metadata.get('system_version', 'N/A')}\n"

print(notes)
EOF
)

        # Save to file for the release step
        echo "$NOTES" > release_notes.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        name: "Research Report - ${{ steps.config.outputs.query }}"
        body_path: new_new_news/release_notes.md
        files: |
          new_new_news/research_report.json
          new_new_news/research_report.html
          new_new_news/research_report.pdf
          new_new_news/artifacts_table.csv
          new_new_news/RESEARCH_SUMMARY.md
          new_new_news/research_metadata.json
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Display workflow summary
      run: |
        cd new_new_news
        echo "# 🎯 Research Report Generated" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Query:** ${{ steps.config.outputs.query }}" >> $GITHUB_STEP_SUMMARY
        echo "**Release Tag:** ${{ steps.tag.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Extract and display key findings
        python << 'EOF' >> $GITHUB_STEP_SUMMARY
import json
with open('research_report.json', 'r') as f:
    data = json.load(f)

summary = data.get('executive_summary', {})

print(f"## Executive Summary\n")
print(f"- **Artifacts Found:** {summary.get('total_artifacts_found', 0)}")
print(f"- **Total Estimated Value:** ${summary.get('total_estimated_value', 0):,}")
print(f"- **Average Confidence:** {summary.get('average_confidence_score', 0):.2f}\n")

print(f"## Top 3 Artifacts\n")
for i, artifact in enumerate(summary.get('top_3_artifacts', [])[:3], 1):
    print(f"{i}. **{artifact['title']}** ({artifact['type']})")
    print(f"   - Value: ${artifact['estimated_value']:,}\n")
EOF

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📥 **Download artifacts from the [Releases page](../../releases/tag/${{ steps.tag.outputs.tag }})**" >> $GITHUB_STEP_SUMMARY
